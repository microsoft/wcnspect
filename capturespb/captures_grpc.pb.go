// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package capturespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CaptureServiceClient is the client API for CaptureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaptureServiceClient interface {
	// server streaming
	StartCapture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (CaptureService_StartCaptureClient, error)
	StopCapture(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type captureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptureServiceClient(cc grpc.ClientConnInterface) CaptureServiceClient {
	return &captureServiceClient{cc}
}

func (c *captureServiceClient) StartCapture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (CaptureService_StartCaptureClient, error) {
	stream, err := c.cc.NewStream(ctx, &CaptureService_ServiceDesc.Streams[0], "/captures.CaptureService/StartCapture", opts...)
	if err != nil {
		return nil, err
	}
	x := &captureServiceStartCaptureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CaptureService_StartCaptureClient interface {
	Recv() (*CaptureResponse, error)
	grpc.ClientStream
}

type captureServiceStartCaptureClient struct {
	grpc.ClientStream
}

func (x *captureServiceStartCaptureClient) Recv() (*CaptureResponse, error) {
	m := new(CaptureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *captureServiceClient) StopCapture(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/captures.CaptureService/StopCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptureServiceServer is the server API for CaptureService service.
// All implementations must embed UnimplementedCaptureServiceServer
// for forward compatibility
type CaptureServiceServer interface {
	// server streaming
	StartCapture(*CaptureRequest, CaptureService_StartCaptureServer) error
	StopCapture(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedCaptureServiceServer()
}

// UnimplementedCaptureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCaptureServiceServer struct {
}

func (UnimplementedCaptureServiceServer) StartCapture(*CaptureRequest, CaptureService_StartCaptureServer) error {
	return status.Errorf(codes.Unimplemented, "method StartCapture not implemented")
}
func (UnimplementedCaptureServiceServer) StopCapture(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCapture not implemented")
}
func (UnimplementedCaptureServiceServer) mustEmbedUnimplementedCaptureServiceServer() {}

// UnsafeCaptureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptureServiceServer will
// result in compilation errors.
type UnsafeCaptureServiceServer interface {
	mustEmbedUnimplementedCaptureServiceServer()
}

func RegisterCaptureServiceServer(s grpc.ServiceRegistrar, srv CaptureServiceServer) {
	s.RegisterService(&CaptureService_ServiceDesc, srv)
}

func _CaptureService_StartCapture_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CaptureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaptureServiceServer).StartCapture(m, &captureServiceStartCaptureServer{stream})
}

type CaptureService_StartCaptureServer interface {
	Send(*CaptureResponse) error
	grpc.ServerStream
}

type captureServiceStartCaptureServer struct {
	grpc.ServerStream
}

func (x *captureServiceStartCaptureServer) Send(m *CaptureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CaptureService_StopCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureServiceServer).StopCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captures.CaptureService/StopCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureServiceServer).StopCapture(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CaptureService_ServiceDesc is the grpc.ServiceDesc for CaptureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaptureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "captures.CaptureService",
	HandlerType: (*CaptureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopCapture",
			Handler:    _CaptureService_StopCapture_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartCapture",
			Handler:       _CaptureService_StartCapture_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "captures.proto",
}
