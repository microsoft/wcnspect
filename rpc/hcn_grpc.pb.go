// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HCNServiceClient is the client API for HCNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HCNServiceClient interface {
	GetHCNLogs(ctx context.Context, in *HCNRequest, opts ...grpc.CallOption) (*HCNResponse, error)
}

type hCNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHCNServiceClient(cc grpc.ClientConnInterface) HCNServiceClient {
	return &hCNServiceClient{cc}
}

func (c *hCNServiceClient) GetHCNLogs(ctx context.Context, in *HCNRequest, opts ...grpc.CallOption) (*HCNResponse, error) {
	out := new(HCNResponse)
	err := c.cc.Invoke(ctx, "/winspect.hcn.HCNService/GetHCNLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HCNServiceServer is the server API for HCNService service.
// All implementations must embed UnimplementedHCNServiceServer
// for forward compatibility
type HCNServiceServer interface {
	GetHCNLogs(context.Context, *HCNRequest) (*HCNResponse, error)
	mustEmbedUnimplementedHCNServiceServer()
}

// UnimplementedHCNServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHCNServiceServer struct {
}

func (UnimplementedHCNServiceServer) GetHCNLogs(context.Context, *HCNRequest) (*HCNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHCNLogs not implemented")
}
func (UnimplementedHCNServiceServer) mustEmbedUnimplementedHCNServiceServer() {}

// UnsafeHCNServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HCNServiceServer will
// result in compilation errors.
type UnsafeHCNServiceServer interface {
	mustEmbedUnimplementedHCNServiceServer()
}

func RegisterHCNServiceServer(s grpc.ServiceRegistrar, srv HCNServiceServer) {
	s.RegisterService(&HCNService_ServiceDesc, srv)
}

func _HCNService_GetHCNLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HCNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HCNServiceServer).GetHCNLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/winspect.hcn.HCNService/GetHCNLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HCNServiceServer).GetHCNLogs(ctx, req.(*HCNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HCNService_ServiceDesc is the grpc.ServiceDesc for HCNService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HCNService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "winspect.hcn.HCNService",
	HandlerType: (*HCNServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHCNLogs",
			Handler:    _HCNService_GetHCNLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hcn.proto",
}
